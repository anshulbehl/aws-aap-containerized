---
- name: Create AWS Infrastructure for AAP Containerized Installation
  hosts: localhost
  gather_facts: false
  vars_files:
    - "{{ project_root | default(playbook_dir + '/../..') }}/extra-vars.yml"

  vars:
    key_path: "{{ project_root | default(playbook_dir + '/../..') }}/files/{{ instance_name }}-key.pem"
    instance_info_path: "{{ project_root | default(playbook_dir + '/../..') }}/files/{{ instance_name }}-info.txt"
    inventory_path: "{{ project_root | default(playbook_dir + '/../..') }}/inventory/hosts.yml"

  tasks:
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ instance_name }}-vpc"
        cidr_block: "{{ vpc_cidr }}"
        region: "{{ aws_region }}"
        tags: "{{ common_tags | combine({'Name': instance_name + '-vpc'}) }}"
        tenancy: default
      register: vpc

    - name: Create Internet Gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        tags: "{{ common_tags | combine({'Name': instance_name + '-igw'}) }}"
      register: igw

    - name: Create public subnet
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ subnet_cidr }}"
        region: "{{ aws_region }}"
        az: "{{ aws_availability_zone }}"
        map_public: true
        tags: "{{ common_tags | combine({'Name': instance_name + '-subnet'}) }}"
      register: subnet

    - name: Create route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        tags: "{{ common_tags | combine({'Name': instance_name + '-route-table'}) }}"
        subnets:
          - "{{ subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
      register: route_table

    - name: Create security group
      amazon.aws.ec2_security_group:
        name: "{{ instance_name }}-sg"
        description: "Security group for AAP containerized setup"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        tags: "{{ common_tags | combine({'Name': instance_name + '-sg'}) }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0
            rule_desc: "Allow SSH"
          - proto: tcp
            ports:
              - 80
              - 443
            cidr_ip: 0.0.0.0/0
            rule_desc: "Allow HTTP/HTTPS"
          - proto: tcp
            ports:
              - 27826
            cidr_ip: 0.0.0.0/0
            rule_desc: "Allow AAP Gateway"
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: security_group

    - name: Create EC2 key pair
      amazon.aws.ec2_key:
        name: "{{ instance_name }}-key"
        region: "{{ aws_region }}"
      register: key_pair
      notify: Save private key

    - name: Launch EC2 instance
      amazon.aws.ec2_instance:
        name: "{{ instance_name }}"
        key_name: "{{ instance_name }}-key"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        instance_type: "{{ instance_type }}"
        network_interfaces:
          - assign_public_ip: true
            subnet_id: "{{ subnet.subnet.id }}"
            groups:
              - "{{ security_group.group_id }}"
        image_id: "{{ ami_id }}"
        region: "{{ aws_region }}"
        tags: "{{ common_tags | combine({'Name': instance_name}) }}"
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_size: "{{ volume_size }}"
              delete_on_termination: true
        wait: true
        wait_timeout: 600
      register: ec2

    - name: Debug EC2 instance structure
      ansible.builtin.debug:
        var: ec2
      when: ec2 is defined

    - name: Set instance facts safely
      ansible.builtin.set_fact:
        instance_id: "{{ ec2.instances[0].instance_id }}"
        public_ip: "{{ ec2.instances[0].network_interfaces[0].association.public_ip | default(ec2.instances[0].public_ip_address) | default('') }}"
        private_ip: "{{ ec2.instances[0].private_ip_address | default(ec2.instances[0].network_interfaces[0].private_ip_address) }}"
        public_dns: "{{ ec2.instances[0].public_dns_name | default(ec2.instances[0].network_interfaces[0].association.public_dns_name) | default('') }}"

    - name: Wait for public IP to be assigned (if needed)
      amazon.aws.ec2_instance_info:
        instance_ids:
          - "{{ instance_id }}"
        region: "{{ aws_region }}"
      register: instance_info
      until: instance_info.instances[0].network_interfaces[0].association.public_ip is defined
      retries: 30
      delay: 10
      when: public_ip == ''

    - name: Update public IP from instance info if needed
      ansible.builtin.set_fact:
        public_ip: "{{ instance_info.instances[0].network_interfaces[0].association.public_ip }}"
        public_dns: "{{ instance_info.instances[0].network_interfaces[0].association.public_dns_name | default('') }}"
      when: public_ip == '' and instance_info is defined

    - name: Wait for SSH to become available
      ansible.builtin.wait_for:
        host: "{{ public_ip }}"
        port: 22
        delay: 10
        timeout: 300

    - name: Add instance to runtime inventory as aap_nodes
      ansible.builtin.add_host:
        name: "{{ public_ip }}"
        groups: aap_nodes
        ansible_host: "{{ public_ip }}"
        ansible_user: ec2-user
        ansible_ssh_private_key_file: "{{ key_path }}"
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

    - name: Save instance information
      ansible.builtin.copy:
        content: |
          Instance ID: {{ instance_id }}
          Public IP: {{ public_ip }}
          Private IP: {{ private_ip }}
          Public DNS: {{ public_dns }}
          Key Path: {{ key_path }}
          Installer FQDN: {{ installer_fqdn_hostname }}
        dest: "{{ instance_info_path }}"
        mode: '0644'

    - name: Create inventory directory if it doesn't exist
      ansible.builtin.file:
        path: "{{ project_root | default(playbook_dir + '/../..') }}/inventory"
        state: directory
        mode: '0755'

    - name: Create inventory file for AAP installation
      ansible.builtin.copy:
        content: |
          ---
          all:
            children:
              aap_nodes:
                hosts:
                  aap_controller:
                    ansible_host: {{ public_ip }}
                    ansible_user: ec2-user
                    ansible_ssh_private_key_file: {{ key_path }}
                    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
        dest: "{{ inventory_path }}"
        mode: '0644'

    - name: Display connection information
      ansible.builtin.debug:
        msg: |
          AWS Infrastructure created successfully!

          Instance Details:
          - Instance ID: {{ instance_id }}
          - Public IP: {{ public_ip }}
          - SSH Command: ssh -i {{ key_path }} ec2-user@{{ public_ip }}

          Next Steps:
          1. Run the AAP installation: ansible-playbook -i {{ inventory_path }} playbooks/aap/install.yml
          2. Access AAP at: https://{{ public_ip }}

  handlers:
    - name: Save private key
      ansible.builtin.copy:
        content: "{{ key_pair.key.private_key }}"
        dest: "{{ key_path }}"
        mode: '0600'
      when: key_pair.key.private_key is defined
